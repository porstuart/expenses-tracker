plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.2'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'org.flywaydb.flyway' version '9.16.0'
    id 'org.sonarqube' version '6.0.1.5171'
    id 'jacoco'
}

group = 'com'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '21'
    targetCompatibility = '21'
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring libraries
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter'

    // Flyway
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-database-postgresql'

    // Utilities
    implementation 'org.projectlombok:lombok:1.18.32'
    annotationProcessor 'org.projectlombok:lombok:1.18.32'

    // Database
    runtimeOnly 'org.postgresql:postgresql'

    // Test dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'org.mockito:mockito-junit-jupiter'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

flyway {
    driver = 'org.postgresql.Driver'
    url = 'jdbc:postgresql://localhost:5432/budgetapp'
    user = 'budgetapp'
    password = 'password'
    locations = ['classpath:db/migration']
    cleanDisabled = false
}

sonar {
    properties {
        property 'sonar.projectKey', 'porstuart_expenses-tracker'
        property 'sonar.organization', 'porstuart'
        property 'sonar.host.url', 'https://sonarcloud.io'
        property 'sonar.coverage.jacoco.xmlReportPaths', "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        property 'sonar.java.coveragePlugin', 'jacoco'
        property 'sonar.junit.reportPaths', "${buildDir}/test-results/test"
    }
}

jacoco {
    toolVersion = '0.8.11'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
    reports {
        html.required = true
        junitXml.required = true
        html.outputLocation = layout.buildDirectory.dir('reports/tests/test')
        junitXml.outputLocation = layout.buildDirectory.dir('test-results/test')
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
        csv.required = false
        xml.outputLocation = layout.buildDirectory.file('reports/jacoco/test/jacocoTestReport.xml')
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                '**/exception/**',
                '**/model/**',
                '**/dao/**',
                '**/config/**',
                '**/type/**',
                'com/budget/BudgetApplication.class'
            ])
        }))
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.8
            }
        }
    }
}